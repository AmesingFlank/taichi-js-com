"use strict";(self.webpackChunktaichi_js_com=self.webpackChunktaichi_js_com||[]).push([[7613],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,f=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7545:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:3,title:"Templates"},o=void 0,s={unversionedId:"docs/advanced/templates",id:"docs/advanced/templates",title:"Templates",description:"In the doc page for fields, we briefly mentioned that ti.template() arguments can be used to pass fields into kernels as arguments. In this page, we will discuss exactly what this means, and what you can and cannot do with template arguments.",source:"@site/docs/docs/2-advanced/3-templates.md",sourceDirName:"docs/2-advanced",slug:"/docs/advanced/templates",permalink:"/docs/docs/advanced/templates",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/docs/2-advanced/3-templates.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Templates"},sidebar:"tutorialSidebar",previous:{title:"Functions and Lambdas",permalink:"/docs/docs/advanced/functions-and-lambdas"},next:{title:"Compile-Time Control Flow",permalink:"/docs/docs/advanced/compile-time-control-flow"}},l={},c=[{value:"Template Semantics",id:"template-semantics",level:2}],p={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In the doc page for ",(0,r.kt)("a",{parentName:"p",href:"https://taichi-js.com/docs/docs/basics/fields#fields-as-template-argument-to-kernels"},"fields"),", we briefly mentioned that ",(0,r.kt)("inlineCode",{parentName:"p"},"ti.template()")," arguments can be used to pass fields into kernels as arguments. In this page, we will discuss exactly what this means, and what you can and cannot do with template arguments."),(0,r.kt)("h2",{id:"template-semantics"},"Template Semantics"),(0,r.kt)("p",null,"Similar to template arguments in C++ functions, template arguments in a ",(0,r.kt)("inlineCode",{parentName:"p"},"taichi.js")," kernel are parameters that affect the code of the function themselves. Given a function ",(0,r.kt)("inlineCode",{parentName:"p"},"f")," with a template arguments ",(0,r.kt)("inlineCode",{parentName:"p"},"a"),", every time ",(0,r.kt)("inlineCode",{parentName:"p"},"f")," is invoked with a different ",(0,r.kt)("inlineCode",{parentName:"p"},"a"),", a new version of the function itself is generated, where occurances of ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," within the function body are replaced with hard-coded value of ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," in the arguments of this invocation. For example, consider the following kernel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let k = ti.kernel(\n    {i: ti.template()},\n    (i) => {\n        return i;\n    }\n)\n")),(0,r.kt)("p",null,"Upon calling ",(0,r.kt)("inlineCode",{parentName:"p"},"k(42)"),", the compiler will create the following function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let k = ti.kernel(\n    () => {\n        return 42\n    }\n)\n")))}m.isMDXComponent=!0}}]);