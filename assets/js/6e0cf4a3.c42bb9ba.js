"use strict";(self.webpackChunktaichi_js_com=self.webpackChunktaichi_js_com||[]).push([[6599],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,f=d["".concat(c,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9434:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:6,title:"Kernel-Scope Code Semantics"},i=void 0,s={unversionedId:"docs/basics/kernel-scope-code-semantics",id:"docs/basics/kernel-scope-code-semantics",title:"Kernel-Scope Code Semantics",description:"In some occasions, the code in taichi.js kernel-scope have slightly different semantics than normal Javascript code. These differences can sometimes cause bugs that are difficult to catch. This page aims to list these differences, so that you don't fall into these traps.",source:"@site/docs/docs/1-basics/6-kernel-scope-code-semantics.md",sourceDirName:"docs/1-basics",slug:"/docs/basics/kernel-scope-code-semantics",permalink:"/docs/docs/basics/kernel-scope-code-semantics",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/docs/1-basics/6-kernel-scope-code-semantics.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Kernel-Scope Code Semantics"},sidebar:"tutorialSidebar",previous:{title:"Built-in Functions",permalink:"/docs/docs/basics/builtin-functions"},next:{title:"Atomics",permalink:"/docs/docs/advanced/atomics"}},c={},l=[{value:"Assignment Semantics",id:"assignment-semantics",level:2}],p={toc:l},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In some occasions, the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"taichi.js")," kernel-scope have slightly different semantics than normal Javascript code. These differences can sometimes cause bugs that are difficult to catch. This page aims to list these differences, so that you don't fall into these traps."),(0,r.kt)("h2",{id:"assignment-semantics"},"Assignment Semantics"),(0,r.kt)("p",null,"In normal Javascript, when arrays and objects are assigned, the arrays/objects themselves are not copied. Rather, the target of the assignment merely maintains a reference to the same array/object. As an example, if we create a vector ",(0,r.kt)("inlineCode",{parentName:"p"},"v")," initialized to ",(0,r.kt)("inlineCode",{parentName:"p"},"[0.0, 1.0]"),", assign ",(0,r.kt)("inlineCode",{parentName:"p"},"v")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"v2"),", and modify ",(0,r.kt)("inlineCode",{parentName:"p"},"v2"),", then ",(0,r.kt)("inlineCode",{parentName:"p"},"v")," becomes modified as well."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// normal JS code:\nlet v = [0.0, 1.0]\nlet v2 = v\nv2[0] = 2.0\nconsole.log(v) // [2.0, 1.0]\n")),(0,r.kt)("p",null,"This is not the bahavior in ",(0,r.kt)("inlineCode",{parentName:"p"},"taichi.js")," kernels. In kernel-scope, after assigning ",(0,r.kt)("inlineCode",{parentName:"p"},"v")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"v2"),", the vector which ",(0,r.kt)("inlineCode",{parentName:"p"},"v")," represents are copied to ",(0,r.kt)("inlineCode",{parentName:"p"},"v2"),", so that now ",(0,r.kt)("inlineCode",{parentName:"p"},"v2")," is its own vector, and any modifications to it will not affect ",(0,r.kt)("inlineCode",{parentName:"p"},"v"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let k = ti.kernel(() => {\n    let v = [0.0, 1.0]\n    let v2 = v\n    v2[0] = 2.0\n    return v\n})\nconsole.log(await k()) // [0.0, 1.0]\n")))}m.isMDXComponent=!0}}]);