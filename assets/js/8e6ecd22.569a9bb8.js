"use strict";(self.webpackChunktaichi_js_com=self.webpackChunktaichi_js_com||[]).push([[2069],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,f=p["".concat(l,".").concat(m)]||p[m]||u[m]||s;return n?a.createElement(f,o(o({ref:t},d),{},{components:n})):a.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},553:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const s={sidebar_position:5,title:"Class Kernels"},o=void 0,i={unversionedId:"docs/advanced/class-kernels",id:"docs/advanced/class-kernels",title:"Class Kernels",description:'So far, we have only seen kernels and fields that live "in the wild", in the sense that they are not members of a class. Once programs gets bigger, however, it\'s natural to want to use classes to encapsulate data stored in fields and kernels that operate on them. This page will provide recommendations on how to do this elegantly.',source:"@site/docs/docs/2-advanced/5-class-kernels.md",sourceDirName:"docs/2-advanced",slug:"/docs/advanced/class-kernels",permalink:"/docs/docs/advanced/class-kernels",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/docs/2-advanced/5-class-kernels.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Class Kernels"},sidebar:"tutorialSidebar",previous:{title:"Compile-Time Control Flow",permalink:"/docs/docs/advanced/compile-time-control-flow"},next:{title:"Render Pipelines",permalink:"/docs/docs/rendering/render-pipelines"}},l={},c=[],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'So far, we have only seen kernels and fields that live "in the wild", in the sense that they are not members of a class. Once programs gets bigger, however, it\'s natural to want to use classes to encapsulate data stored in fields and kernels that operate on them. This page will provide recommendations on how to do this elegantly.'),(0,r.kt)("p",null,"Adding a field as a member to a class requires nothing special. You can, for example, initialize a member as a field in the constructor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"class C {\n    constructor() {\n        this.f = ti.field(ti.f32, 1000)\n        ...\n    }\n}\n")),(0,r.kt)("p",null,"However, if you want to create a member which is a kernel, and you would like to access ",(0,r.kt)("inlineCode",{parentName:"p"},"this.f")," in that kernel, you will require a special ",(0,r.kt)("inlineCode",{parentName:"p"},"ti.classKernel(this, ...)")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"    constructor() {\n        this.f = ti.field(ti.f32, 1000)\n\n        this.k = ti.classKernel(this, () => {\n            for(let i of ti.range(1000)){\n                this.f[i] = this.f[i] + 1\n            }\n        })\n    }\n")),(0,r.kt)("p",null,"The first argument to ",(0,r.kt)("inlineCode",{parentName:"p"},"ti.classKernel")," should always be ",(0,r.kt)("inlineCode",{parentName:"p"},"this"),", and within the class kernel, you will be able to access all members of ",(0,r.kt)("inlineCode",{parentName:"p"},"this"),", using the standard ",(0,r.kt)("inlineCode",{parentName:"p"},"this.")," syntax. Notice that you should no longer call ",(0,r.kt)("inlineCode",{parentName:"p"},"ti.addToKernelScope()")," on the fields you want to access. (In fact, this is exactly why ",(0,r.kt)("inlineCode",{parentName:"p"},"classKernel")," is introduced -- because ",(0,r.kt)("inlineCode",{parentName:"p"},"addToKernelScope")," has a ",(0,r.kt)("em",{parentName:"p"},"global")," effect, which doesn't make sense for declarations within a class, as classes can have multiple instances)."),(0,r.kt)("p",null,"If you would like to use ",(0,r.kt)("a",{parentName:"p",href:"https://taichi-js.com/docs/docs/basics/kernels#arguments"},"argument type annotations"),", you can pass the annotation object to ",(0,r.kt)("inlineCode",{parentName:"p"},"classKernel(..)")," right after ",(0,r.kt)("inlineCode",{parentName:"p"},"this"),". For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"    constructor() {\n        this.f = ti.field(ti.f32, 1000)\n\n        this.k = ti.classKernel(this, \n            {arg: ti.f32},\n            (arg) => {\n                for(let i of ti.range(1000)){\n                    this.f[i] = this.f[i] + arg\n                }\n            }\n        )\n    }\n")))}u.isMDXComponent=!0}}]);