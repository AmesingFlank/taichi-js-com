"use strict";(self.webpackChunktaichi_js_com=self.webpackChunktaichi_js_com||[]).push([[1503],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,f=u["".concat(p,".").concat(m)]||u[m]||s[m]||a;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2969:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>s,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:3,title:"Rendering Built-in Functions"},o=void 0,l={unversionedId:"docs/rendering/rendering-builtin-functions",id:"docs/rendering/rendering-builtin-functions",title:"Rendering Built-in Functions",description:"This page lists rendering-specific built-in functions available in taichi.js render pipelines:",source:"@site/docs/docs/3-rendering/3-rendering-builtin-functions.md",sourceDirName:"docs/3-rendering",slug:"/docs/rendering/rendering-builtin-functions",permalink:"/docs/docs/rendering/rendering-builtin-functions",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/docs/3-rendering/3-rendering-builtin-functions.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Rendering Built-in Functions"},sidebar:"tutorialSidebar",previous:{title:"Textures",permalink:"/docs/docs/rendering/textures"},next:{title:"GLTF",permalink:"/docs/docs/rendering/GLTF"}},p={},c=[],d={toc:c},u="wrapper";function s(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This page lists rendering-specific built-in functions available in ",(0,i.kt)("inlineCode",{parentName:"p"},"taichi.js")," render pipelines:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ti.outputVertex(v)"),": Creating vertex output to be interpolated and passed-on to fragment shader. ",(0,i.kt)("inlineCode",{parentName:"li"},"v")," can be a scalar, vector, matrix, or struct."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ti.outputPosition(pos)"),": Outputting clip-space position of the vertex in each vertex shader thread"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ti.clearColor(renderTarget, color)"),": Should be called at top-level of the kernel, defining the background color to clear on the render target."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ti.useDepth(depthBuffer, options = {})"),": Specifying depth buffer to be used. ",(0,i.kt)("inlineCode",{parentName:"li"},"options")," is an optional argument, which may contain",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{\n  storeDepth?: bool, // whether or not to write to the depth buffer, default to true\n  clearDepth?: bool, // whether or not to clear the depth buffer, default to true. If true, will clear 1.0 as the depth value\n}\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ti.outputColor(renderTarget, color)"),": writing ",(0,i.kt)("inlineCode",{parentName:"li"},"color")," onto ",(0,i.kt)("inlineCode",{parentName:"li"},"renderTarget")," in fragment shader"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ti.outputDepth(depth)"),": writing ",(0,i.kt)("inlineCode",{parentName:"li"},"depth")," to the active depth buffer in fragment shader"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ti.discard()"),": In fragment shader, discard the current pixel (not writing to color/depth buffers)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ti.getVertexIndex()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ti.getInstanceIndex()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ti.getFragCoord()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ti.dpdx(p)")," Fragment shader derivative along the x-axis"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ti.dpdy(p)")," Fragment shader derivative along the y-axis")))}s.isMDXComponent=!0}}]);