"use strict";(self.webpackChunktaichi_js_com=self.webpackChunktaichi_js_com||[]).push([[116],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,d=u["".concat(s,".").concat(m)]||u[m]||y[m]||r;return n?i.createElement(d,o(o({ref:t},l),{},{components:n})):i.createElement(d,o({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:a,o[1]=p;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9508:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>y,frontMatter:()=>r,metadata:()=>p,toc:()=>c});var i=n(7462),a=(n(7294),n(3905));const r={sidebar_position:1,title:"Using taichi.js with Typescript"},o=void 0,p={unversionedId:"docs/production/typescript",id:"docs/production/typescript",title:"Using taichi.js with Typescript",description:"Typescript is a great tool. It includes many great features such type annotations and compile-time type checking, which make writing programs on the web a lot more scalable. It is unfortunate and ironic that these great features actually become roadblocks when you write typescript application in taichi.js.",source:"@site/docs/docs/4-production/2-typescript.md",sourceDirName:"docs/4-production",slug:"/docs/production/typescript",permalink:"/docs/docs/production/typescript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/docs/4-production/2-typescript.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Using taichi.js with Typescript"},sidebar:"tutorialSidebar",previous:{title:"Using taichi.js with Minifiers",permalink:"/docs/docs/production/minifier"}},s={},c=[{value:"Type Checking Problems",id:"type-checking-problems",level:2},{value:"Silencing the Type Checker",id:"silencing-the-type-checker",level:2},{value:"Ultimate Weapon",id:"ultimate-weapon",level:2}],l={toc:c},u="wrapper";function y(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Typescript is a great tool. It includes many great features such type annotations and compile-time type checking, which make writing programs on the web a lot more scalable. It is unfortunate and ironic that these great features actually become roadblocks when you write typescript application in ",(0,a.kt)("inlineCode",{parentName:"p"},"taichi.js"),"."),(0,a.kt)("h2",{id:"type-checking-problems"},"Type Checking Problems"),(0,a.kt)("p",null,"If you are writing a kernel within a typescript file, the typescript type checker will apply typescript's type rules to check your kernel code. However, ",(0,a.kt)("inlineCode",{parentName:"p"},"taichi.js")," has its own type system, which means typescript can sometimes compain about valid ",(0,a.kt)("inlineCode",{parentName:"p"},"taichi.js")," code."),(0,a.kt)("p",null,"As an example, when accessing a 2-dimensional field in ",(0,a.kt)("inlineCode",{parentName:"p"},"taichi.js"),", you need to pass a 2D vector within the ",(0,a.kt)("inlineCode",{parentName:"p"},"[..]"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"let f = ti.field(ti.f32, [1000, 1000]);\nti.addToKernelScope({ f });\nlet increment = ti.kernel(() => {\n    f[[0, 0]] = f[[0, 0]] + 1\n})\n")),(0,a.kt)("p",null,"Here, typescript will complain that ",(0,a.kt)("inlineCode",{parentName:"p"},"[0, 0]")," isn't a valid index, because in normal typescript, arrays are not a valid type for indexing."),(0,a.kt)("p",null,"As a second example, ",(0,a.kt)("inlineCode",{parentName:"p"},"taichi.js")," allows you to multiple a vector by a scalar:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"let v1 = [0.1, 0.2]\nlet v = v1 * 0.5\n")),(0,a.kt)("p",null,"typescript does not like this, because you cannot multiply an array by a number in typescript."),(0,a.kt)("h2",{id:"silencing-the-type-checker"},"Silencing the Type Checker"),(0,a.kt)("p",null,"To stop typescript from complaining, we need to silence its type checker. There are a few different ways to do this:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"any"),"!"),(0,a.kt)("p",{parentName:"li"},"In typescript, it is generated discouraged to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"any")," type decoration, because type checkers will usually consider variables with ",(0,a.kt)("inlineCode",{parentName:"p"},"any")," type to always be valid in any expression, even though they may not actually be valid. We can use this to our advantage by decoration selected ",(0,a.kt)("inlineCode",{parentName:"p"},"taichi.js")," variables with ",(0,a.kt)("inlineCode",{parentName:"p"},"any"),", so that typescript won't type-check them. For example:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"let v1: any = [0.1, 0.2]\nlet v = v1 * 0.5\n")),(0,a.kt)("p",{parentName:"li"},"In general, it's useful to decorate ",(0,a.kt)("inlineCode",{parentName:"p"},"any")," onto the ",(0,a.kt)("inlineCode",{parentName:"p"},"taichi.js")," variables which has a vector or matrix type, because these types are the most different from the normal typescript type system, in which they appear as arrays.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Error-suppressing comments"),(0,a.kt)("p",{parentName:"li"},"In typescript, you may use the ",(0,a.kt)("inlineCode",{parentName:"p"},"//@ts-ignore")," comment above any line to stop typescript from type-checking it. As an example,"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"let v1 = [0.1, 0.2]\n//@ts-ignore\nlet v = v1 * 0.5\n")),(0,a.kt)("p",{parentName:"li"},"typescript won't throw any errors on this multiplication because we have asked it to ignore this line of code."),(0,a.kt)("p",{parentName:"li"},"If you can't be bothered to include per-line suppressions or use ",(0,a.kt)("inlineCode",{parentName:"p"},"any")," decorations, you may also put a ",(0,a.kt)("inlineCode",{parentName:"p"},"//@ts-nocheck")," at the top of your typescript file. This will cause typescript to ignore all type errors in the file. Notice that this also includes any non-kernel code that you may file in this file."))),(0,a.kt)("h2",{id:"ultimate-weapon"},"Ultimate Weapon"),(0,a.kt)("p",null,"As we ",(0,a.kt)("a",{parentName:"p",href:"https://taichi-js.com/docs/docs/production/minifier#string-for-the-win"},"previously mentioned"),", the ultimate mitigation you can always rely on is to pass a raw string (instead of a function) to ",(0,a.kt)("inlineCode",{parentName:"p"},"ti.kernel"),". This method also works when you want to include kernels in typescript code."))}y.isMDXComponent=!0}}]);